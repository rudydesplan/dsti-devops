name: Flask API Test

on:
  push:
    branches:
      - feature/*
      - fix/*
      - deploy/*
      - develop
      - main
  pull_request:
    branches:
      - deploy/*
      - develop
      - main

jobs:
  test:
    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        mongodb-version: ['4.4' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3.5.2

    - name: Set up Python
      uses: actions/setup-python@v4.6.0

      with:
        python-version: '3.11.2'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./flask-api
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt && python setup.py install

#    - name: Update package repository
#      run: sudo apt-get update
#
#    - name: Install MongoDB client tools
#      run: sudo apt-get install -y mongodb-clients
#
#    - name: Start MongoDB
#      uses: supercharge/mongodb-github-action@1.8.0
#      with:
#        mongodb-port: 27017
#        mongodb-version: ${{ matrix.mongodb-version }}
#        mongodb-db: avocados_db
#        args: '--auth --replSet rs0'
#
#    - name: Wait for MongoDB
#      run: |
#        mongo --eval 'rs.initiate({_id: "rs0", members: [ { _id: 0, host: "localhost:27017" } ] })'
#
#    - name: Create MongoDB User
#      run: |
#        mongo admin --eval 'db.createUser({user: "dsti-devops", pwd: "dsti-devops", roles: [{role: "root", db: "admin"}]})'
#
#    - name: Check MongoDB health
#      run: |
#        mongo --eval "printjson(db.serverStatus())" --username dsti-devops --password dsti-devops --authenticationDatabase avocados_db --host localhost:27017

#   - name: Install linting dependencies
#     run: pip install flake8

#   - name: Run linting
#     run: flake8 .

#   - name: Install formatting dependencies
#     run: pip install black

#   - name: Check code formatting
#     run: black --check .

    - name: Install coverage dependencies
      run: pip install pytest-cov

    # Start API and set MONGODB_URI env variable from mongo test server on the cloud
    - name: Start Flask API
      working-directory: ./flask-api
      env:
        MONGODB_URI: "mongodb+srv://${{ secrets.MONGODB_USERNAME }}:${{ secrets.MONGODB_PASSWORD }}@cluster0.piza0cu.mongodb.net/?retryWrites=true&w=majority"
        DATASET_LOCATION: "./datasets/avocado.csv"
      run: python service/service.py & echo ${{ env.MONGODB_URI }}

    - name: Wait for API to start up
      run: sleep 5 & echo ${{ env.DATASET_LOCATION }}
      
    - name: Test if API is running
      run: |
        curl http://localhost:5000/health
        
    - name: Print directory structure
      run: find . -type f
        
    - name: Run tests with coverage
      working-directory: ./flask-api
      run: echo ${{ env.DATASET_LOCATION }} & pytest -v --cov=. tests/ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3.1.3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        flags: unittests
        name: codecov-umbrella
        verbose: true
    
#   - name: Login to Docker Hub
#     uses: docker/login-action@v2
#     with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}
    
#   - name: Set up Docker Buildx
#     uses: docker/setup-buildx-action@v2.5.0

    # Add Docker layer caching
#   - name: Cache Docker layers
#     uses: actions/cache@v3
#     with:
#       path: /tmp/.buildx-cache
#       key: ${{ runner.os }}-buildx-${{ github.sha }}
#       restore-keys: |
#         ${{ runner.os }}-buildx-

#   - name: Build and push Docker image
#     uses: docker/build-push-action@v4.0.0
#     with:
#       context: ./flask-api
#       push: true
#       tags: ${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest
#       cache-from: type=local,src=/tmp/.buildx-cache
#       cache-to: type=local,dest=/tmp/.buildx-cache
