import pytest
from pymongo import MongoClient
from main import MongoConnector, create_unique_id

# Utilisez une base de données de test pour éviter d'affecter la base de données de production
MONGODB_TEST_URI = "mongodb://localhost:27017/test_db"

@pytest.fixture
def test_mongo_connector():
    return MongoConnector(MONGODB_TEST_URI, "test_db")
    
# Test function for printing avocados documents (not really a test, mainly for manual checking)
def test_print_avocados_documents(test_mongo_connector):
    collection = test_mongo_connector.db["test_avocados"]
    for document in collection.find():
        print(document)    
    
#0 Test if create_unique_index function creates unique index correctly
def test_create_unique_index(test_mongo_connector):
    test_mongo_connector.create_unique_index("test_avocados")
    
    collection = test_mongo_connector.db["test_avocados"]
    indexes = collection.index_information()
    
    assert "unique_id_1" in indexes
    assert indexes["unique_id_1"]["unique"]

#1 Test if generate_unique_id function generates unique IDs correctly for different data
def test_generate_unique_id():

#2a Test if upsert_data function inserts data correctly
def test_upsert_data(test_mongo_connector):
    test_data = [
        {
            "date": "2021-02-02",
            "small_plu": "1234",
            "state": "CA",
            "average_size_bags": "4.3",
            "region": "San Francisco",
            "season": "spring",
        }
    ]
    
    test_mongo_connector.upsert_data("test_avocados", test_data)
    
    collection = test_mongo_connector.db["test_avocados"]
    assert collection.count_documents({}) == 1
    
    document = collection.find_one({})
    unique_id = create_unique_id(test_data[0])
    
    assert document["unique_id"] == unique_id

#2b Test if upsert_data function updates existing data correctly
def test_upsert_data_existing_data(test_mongo_connector):
    test_data = {
        "date": "2021-02-02",
        "small_plu": "1234",
        "state": "CA",
        "average_size_bags": "4.3",
        "region": "San Francisco",
        "season": "spring",
    }

    test_mongo_connector.upsert_data("test_avocados", [test_data])
    collection = test_mongo_connector.db["test_avocados"]
    assert collection.count_documents({}) == 1

    test_data["average_size_bags"] = "5.0"
    test_mongo_connector.upsert_data("test_avocados", [test_data])
    assert collection.count_documents({}) == 1

    document = collection.find_one({})
    assert document["average_size_bags"] == "5.0"

#3 Test if delete_data function deletes data correctly
def test_delete_data(test_mongo_connector):
    test_data = {
        "date": "2021-02-02",
        "small_plu": "1234",
        "state": "CA",
        "average_size_bags": "4.3",
        "region": "San Francisco",
        "season": "spring",
    }

    unique_id = create_unique_id(test_data)
    test_mongo_connector.upsert_data("test_avocados", [test_data])
    collection = test_mongo_connector.db["test_avocados"]
    assert collection.count_documents({}) == 1

    deleted_count = test_mongo_connector.delete_data("test_avocados", unique_id)
    assert deleted_count == 1
    assert collection.count_documents({}) == 0

#4a Test if update_data function updates data correctly
def test_update_data(test_mongo_connector):
    test_data = {
        "date": "2021-02-02",
        "small_plu": "1234",
        "state": "CA",
        "average_size_bags": "4.3",
        "region": "San Francisco",
        "season": "spring",
    }

    updated_data = {
        "date": "2021-02-02",
        "small_plu": "1234",
        "state": "CA",
        "average_size_bags": "5.0",
        "region": "San Francisco",
        "season": "spring",
    }

    unique_id = create_unique_id(test_data)
    test_mongo_connector.upsert_data("test_avocados", [test_data])
    collection = test_mongo_connector.db["test_avocados"]
    assert collection.count_documents({}) == 1

    modified_count = test_mongo_connector.update_data("test_avocados", unique_id, updated_data)
    assert modified_count == 1

    document = collection.find_one({})
    assert document["average_size_bags"] == "5.0"

#4b Test if update_data function does not modify any data when given a non-existent unique_id
def test_update_data_non_existent_data(test_mongo_connector):
    non_existent_unique_id = "non_existent_id"
    data_to_update = {
        "date": "2021-02-02",
        "small_plu": "1234",
        "state": "CA",
        "average_size_bags": "5.0",
        "region": "San Francisco",
        "season": "spring",
    }

    modified_count = test_mongo_connector.update_data("test_avocados", non_existent_unique_id, data_to_update)
    assert modified_count == 0

#5 Test if get_avocado_count function returns the correct count of documents
def test_get_avocado_count(test_mongo_connector):

#6 Test if get_table function returns all documents from a specified collection
def test_get_table(test_mongo_connector):

#7 Test if get_row function returns a single document by its unique index from a specified collection
def test_get_row(test_mongo_connector):

#8 Test if insert_row function inserts a new row into the avocados collection
def test_insert_row(test_mongo_connector):

#9a Test if modify_region_for_indexes function updates the region value for avocado documents within a given index range
def test_modify_region_for_indexes(test_mongo_connector):

#9b Test if modify_region_for_indexes raises ValueError for invalid range
def test_modify_region_for_invalid_range(test_mongo_connector):
    try:
        test_mongo_connector.modify_region_for_indexes(5, 3, "West")
    except ValueError as e:
        print(str(e))

#10a Test if delete_rows_for_indexes function deletes avocado documents within a given index range
def test_delete_rows_for_indexes(test_mongo_connector):


#10b Test if delete_rows_for_indexes raises ValueError for invalid range
def test_delete_rows_for_invalid_range(test_mongo_connector):
    try:
        test_mongo_connector.delete_rows_for_indexes(-1, 2)
    except ValueError as e:
        print(str(e))
        
#11 Test if get_avocados_by_region function returns avocados from a specific region
def test_get_avocados_by_region(test_mongo_connector):

#12 Test if get_avocados_by_season function returns avocados for a specific season
def test_get_avocados_by_season(test_mongo_connector):

#13 Test if get_avocados_by_date_range function returns avocados within a specific date range
def test_get_avocados_by_date_range(test_mongo_connector):

#14 Test if get_avg_price_by_region function returns the average price of avocados for a specific region
def test_get_avg_price_by_region(test_mongo_connector):

#15 Test if get_avocados_price_above function returns avocados with a price above the given min_price
def test_get_avocados_price_above(test_mongo_connector):

#16 Test if get_avocados_price_below function returns avocados with a price below the given max_price
def test_get_avocados_price_below(test_mongo_connector):

#17 Test if get_price_extremes_by_region function returns the highest and lowest avocado prices for a specific region
def test_get_price_extremes_by_region(test_mongo_connector):

#18 Test if get_total_avocados_by_region function returns the total number of avocados sold in a specific region
def test_get_total_avocados_by_region(test_mongo_connector):
       
